"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CVETemplateParser = void 0;
const yaml = __importStar(require("js-yaml"));
const promises_1 = require("fs/promises");
const glob_1 = require("glob");
const path = __importStar(require("path"));
class CVETemplateParser {
    /**
     * Load all CVE templates from a directory
     */
    async loadTemplates(directory) {
        const templateFiles = await (0, glob_1.glob)(path.join(directory, '**/*.yaml'));
        const templates = [];
        for (const file of templateFiles) {
            try {
                const template = await this.parseTemplate(file);
                templates.push(template);
            }
            catch (error) {
                console.warn(`Failed to parse CVE template ${file}:`, error.message);
            }
        }
        return templates;
    }
    /**
     * Parse a single CVE template file
     */
    async parseTemplate(filePath) {
        const content = await (0, promises_1.readFile)(filePath, 'utf-8');
        const parsed = yaml.load(content);
        this.validateTemplate(parsed);
        return {
            id: parsed.id,
            info: {
                name: parsed.info.name,
                author: parsed.info.author || 'unknown',
                severity: parsed.info.severity || 'info',
                description: parsed.info.description || '',
                reference: Array.isArray(parsed.info.reference)
                    ? parsed.info.reference
                    : [parsed.info.reference],
                tags: parsed.info.tags ? parsed.info.tags.split(',').map((t) => t.trim()) : [],
            },
            requests: this.parseRequests(parsed.requests),
        };
    }
    /**
     * Parse request definitions
     */
    parseRequests(requests) {
        return requests.map(req => ({
            method: req.method || 'GET',
            path: Array.isArray(req.path) ? req.path : [req.path],
            headers: req.headers || {},
            body: req.body,
            'matchers-condition': req['matchers-condition'] || 'or',
            matchers: this.parseMatchers(req.matchers || []),
        }));
    }
    /**
     * Parse matcher definitions
     */
    parseMatchers(matchers) {
        return matchers.map(matcher => ({
            type: matcher.type,
            part: matcher.part || 'body',
            words: matcher.words,
            regex: matcher.regex,
            status: matcher.status,
            dsl: matcher.dsl,
            condition: matcher.condition || 'or',
            negative: matcher.negative || false,
        }));
    }
    /**
     * Validate template structure
     */
    validateTemplate(template) {
        if (!template.id) {
            throw new Error('Template missing required field: id');
        }
        if (!template.info) {
            throw new Error('Template missing required field: info');
        }
        if (!template.requests || !Array.isArray(template.requests)) {
            throw new Error('Template missing required field: requests (must be array)');
        }
    }
    /**
     * Filter templates by severity
     */
    filterBySeverity(templates, severities) {
        return templates.filter(t => severities.includes(t.info.severity));
    }
    /**
     * Filter templates by tags
     */
    filterByTags(templates, tags) {
        return templates.filter(t => t.info.tags.some(tag => tags.includes(tag)));
    }
    /**
     * Get template by ID
     */
    getTemplateById(templates, id) {
        return templates.find(t => t.id === id);
    }
}
exports.CVETemplateParser = CVETemplateParser;
