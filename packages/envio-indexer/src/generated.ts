// Generated types for Envio indexer
// This file is normally auto-generated by `envio codegen`
// For now, it's manually created to match the GraphQL schema

export type Severity = "CRITICAL" | "HIGH" | "MEDIUM" | "LOW" | "INFO";
export type ScanStatus = "PASS" | "FAIL" | "PENDING";
export type RemediationStatus = "OPEN" | "IN_PROGRESS" | "RESOLVED" | "WONT_FIX";

export interface SecurityScan {
  id: string;
  contractAddress: string;
  chainId: number;
  scanTimestamp: bigint;
  templateId: string;
  severity: Severity;
  status: ScanStatus;
  riskScore: bigint;
  details: string;
  txHash: string;
}

export interface VulnerabilityEvent {
  id: string;
  contractAddress: string;
  vulnerabilityType: string;
  severity: Severity;
  detectedAt: bigint;
  blockNumber: bigint;
  txHash: string;
  exploited: boolean;
  remediationStatus: RemediationStatus;
  remediatedAt?: bigint;
  scan?: SecurityScan;
}

export interface SecurityMetric {
  id: string;
  contractAddress: string;
  totalScans: number;
  criticalIssues: number;
  highIssues: number;
  mediumIssues: number;
  lowIssues: number;
  averageRiskScore: number;
  lastScanTimestamp: bigint;
  firstScanTimestamp: bigint;
}

export interface ContractDeployment {
  id: string;
  contractAddress: string;
  deployer: string;
  deployedAt: bigint;
  blockNumber: bigint;
  txHash: string;
}

// Event handler context types
export interface Context {
  SecurityScan: {
    get: (id: string) => Promise<SecurityScan | undefined>;
    create: (data: Omit<SecurityScan, 'id'> & { id: string }) => Promise<SecurityScan>;
    set: (data: SecurityScan) => Promise<void>;
  };
  VulnerabilityEvent: {
    get: (id: string) => Promise<VulnerabilityEvent | undefined>;
    create: (data: Omit<VulnerabilityEvent, 'id'> & { id: string }) => Promise<VulnerabilityEvent>;
    set: (data: VulnerabilityEvent) => Promise<void>;
  };
  SecurityMetric: {
    get: (id: string) => Promise<SecurityMetric | undefined>;
    create: (data: Omit<SecurityMetric, 'id'> & { id: string }) => Promise<SecurityMetric>;
    set: (data: SecurityMetric) => Promise<void>;
  };
  ContractDeployment: {
    get: (id: string) => Promise<ContractDeployment | undefined>;
    create: (data: Omit<ContractDeployment, 'id'> & { id: string }) => Promise<ContractDeployment>;
    set: (data: ContractDeployment) => Promise<void>;
  };
}

// Event parameter types
export interface VulnerabilityDetectedParams {
  contractAddress: string;
  vulnType: string;
  severity: number;
}

export interface SecurityScanCompletedParams {
  contractAddress: string;
  timestamp: bigint;
  riskScore: bigint;
}

export interface ContractDeployedParams {
  contractAddress: string;
  deployer: string;
  timestamp: bigint;
}

// Event types
export interface EventBase {
  transaction: {
    hash: string;
  };
  block: {
    number: bigint;
    timestamp: bigint;
  };
  logIndex: number;
}

export interface VulnerabilityDetectedEvent extends EventBase {
  params: VulnerabilityDetectedParams;
}

export interface SecurityScanCompletedEvent extends EventBase {
  params: SecurityScanCompletedParams;
}

export interface ContractDeployedEvent extends EventBase {
  params: ContractDeployedParams;
}

// N3SecurityOracle contract events (mock structure for type checking)
export const N3SecurityOracle = {
  VulnerabilityDetected: {
    handler: (fn: (params: { event: VulnerabilityDetectedEvent; context: Context }) => Promise<void>) => {
      // This is a mock for type checking - Envio will replace this at runtime
      return fn;
    }
  },
  
  SecurityScanCompleted: {
    handler: (fn: (params: { event: SecurityScanCompletedEvent; context: Context }) => Promise<void>) => {
      // This is a mock for type checking - Envio will replace this at runtime
      return fn;
    }
  },
  
  ContractDeployed: {
    handler: (fn: (params: { event: ContractDeployedEvent; context: Context }) => Promise<void>) => {
      // This is a mock for type checking - Envio will replace this at runtime
      return fn;
    }
  },
};
